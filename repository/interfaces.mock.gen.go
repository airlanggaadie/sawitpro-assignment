// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/SawitProRecruitment/UserService/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPostgresqlRepositoryInterface is a mock of PostgresqlRepositoryInterface interface.
type MockPostgresqlRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresqlRepositoryInterfaceMockRecorder
}

// MockPostgresqlRepositoryInterfaceMockRecorder is the mock recorder for MockPostgresqlRepositoryInterface.
type MockPostgresqlRepositoryInterfaceMockRecorder struct {
	mock *MockPostgresqlRepositoryInterface
}

// NewMockPostgresqlRepositoryInterface creates a new mock instance.
func NewMockPostgresqlRepositoryInterface(ctrl *gomock.Controller) *MockPostgresqlRepositoryInterface {
	mock := &MockPostgresqlRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPostgresqlRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresqlRepositoryInterface) EXPECT() *MockPostgresqlRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CheckPhonenumberExists mocks base method.
func (m *MockPostgresqlRepositoryInterface) CheckPhonenumberExists(ctx context.Context, phonenumber string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPhonenumberExists", ctx, phonenumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPhonenumberExists indicates an expected call of CheckPhonenumberExists.
func (mr *MockPostgresqlRepositoryInterfaceMockRecorder) CheckPhonenumberExists(ctx, phonenumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPhonenumberExists", reflect.TypeOf((*MockPostgresqlRepositoryInterface)(nil).CheckPhonenumberExists), ctx, phonenumber)
}

// CountLoginSession mocks base method.
func (m *MockPostgresqlRepositoryInterface) CountLoginSession(ctx context.Context, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLoginSession", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CountLoginSession indicates an expected call of CountLoginSession.
func (mr *MockPostgresqlRepositoryInterfaceMockRecorder) CountLoginSession(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLoginSession", reflect.TypeOf((*MockPostgresqlRepositoryInterface)(nil).CountLoginSession), ctx, userId)
}

// GetUserById mocks base method.
func (m *MockPostgresqlRepositoryInterface) GetUserById(ctx context.Context, id uuid.UUID) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockPostgresqlRepositoryInterfaceMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockPostgresqlRepositoryInterface)(nil).GetUserById), ctx, id)
}

// GetUserByPhonenumber mocks base method.
func (m *MockPostgresqlRepositoryInterface) GetUserByPhonenumber(ctx context.Context, phonenumber string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhonenumber", ctx, phonenumber)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhonenumber indicates an expected call of GetUserByPhonenumber.
func (mr *MockPostgresqlRepositoryInterfaceMockRecorder) GetUserByPhonenumber(ctx, phonenumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhonenumber", reflect.TypeOf((*MockPostgresqlRepositoryInterface)(nil).GetUserByPhonenumber), ctx, phonenumber)
}

// GetUserPasswordById mocks base method.
func (m *MockPostgresqlRepositoryInterface) GetUserPasswordById(ctx context.Context, id uuid.UUID) (model.UserPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordById", ctx, id)
	ret0, _ := ret[0].(model.UserPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordById indicates an expected call of GetUserPasswordById.
func (mr *MockPostgresqlRepositoryInterfaceMockRecorder) GetUserPasswordById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordById", reflect.TypeOf((*MockPostgresqlRepositoryInterface)(nil).GetUserPasswordById), ctx, id)
}

// InsertNewUser mocks base method.
func (m *MockPostgresqlRepositoryInterface) InsertNewUser(ctx context.Context, newUser model.User, userAuth model.UserPassword) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", ctx, newUser, userAuth)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockPostgresqlRepositoryInterfaceMockRecorder) InsertNewUser(ctx, newUser, userAuth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockPostgresqlRepositoryInterface)(nil).InsertNewUser), ctx, newUser, userAuth)
}

// UpdateUser mocks base method.
func (m *MockPostgresqlRepositoryInterface) UpdateUser(ctx context.Context, userId uuid.UUID, fullname, phonenumber string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userId, fullname, phonenumber)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockPostgresqlRepositoryInterfaceMockRecorder) UpdateUser(ctx, userId, fullname, phonenumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockPostgresqlRepositoryInterface)(nil).UpdateUser), ctx, userId, fullname, phonenumber)
}

// MockJWTRepositoryInterface is a mock of JWTRepositoryInterface interface.
type MockJWTRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJWTRepositoryInterfaceMockRecorder
}

// MockJWTRepositoryInterfaceMockRecorder is the mock recorder for MockJWTRepositoryInterface.
type MockJWTRepositoryInterfaceMockRecorder struct {
	mock *MockJWTRepositoryInterface
}

// NewMockJWTRepositoryInterface creates a new mock instance.
func NewMockJWTRepositoryInterface(ctrl *gomock.Controller) *MockJWTRepositoryInterface {
	mock := &MockJWTRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockJWTRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTRepositoryInterface) EXPECT() *MockJWTRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockJWTRepositoryInterface) Generate(userId uuid.UUID, additionalClaims map[string]string, expiry time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", userId, additionalClaims, expiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockJWTRepositoryInterfaceMockRecorder) Generate(userId, additionalClaims, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockJWTRepositoryInterface)(nil).Generate), userId, additionalClaims, expiry)
}

// Verify mocks base method.
func (m *MockJWTRepositoryInterface) Verify(jwt string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", jwt)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockJWTRepositoryInterfaceMockRecorder) Verify(jwt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockJWTRepositoryInterface)(nil).Verify), jwt)
}
